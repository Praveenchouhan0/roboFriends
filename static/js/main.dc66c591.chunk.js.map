{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","robots.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","username","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","robos","console","log","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_CardList","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCHSC,EAZF,SAAAC,GAAmB,IAAjBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAE1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAK,SAASC,IAAG,wBAAAC,OAA0BP,KAChDC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCGDS,EAXC,SAAAX,GAAY,IAAVY,EAAUZ,EAAVY,OACRC,EAAcD,EAAOE,IAAI,SAACC,EAAKC,GACnC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKF,EAAGb,GAAIS,EAAOI,GAAGb,GAAIF,KAAMW,EAAOI,GAAGf,KAAMC,MAAOU,EAAOI,GAAGd,UAEhF,OACIE,EAAAC,EAAAC,cAAA,WAEDO,ICKQM,EAZC,SAAAnB,GAA8BA,EAA5BoB,YAA4B,IAAhBC,EAAgBrB,EAAhBqB,aAC1B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACAC,UAAU,gCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAPI,SAPF,SAACC,GACV,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,YCyDJnB,EA9DO,CAClB,CACET,GAAI,EACJF,KAAM,cACN+B,SAAU,OACV9B,MAAO,uBAET,CACEC,GAAI,EACJF,KAAM,kBACN+B,SAAU,SACV9B,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,kBACN+B,SAAU,OACV9B,MAAO,kBAET,CACEC,GAAI,EACJF,KAAM,cACN+B,SAAU,SACV9B,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,UACN+B,SAAU,QACV9B,MAAO,8BAET,CACEC,GAAI,EACJF,KAAM,kBACN+B,SAAU,OACV9B,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,UACN+B,SAAU,KACV9B,MAAO,mBAET,CACEC,GAAI,EACJF,KAAM,aACN+B,SAAU,QACV9B,MAAO,uBAET,CACEC,GAAI,EACJF,KAAM,cACN+B,SAAU,QACV9B,MAAO,kBAET,CACEC,GAAI,GACJF,KAAM,gBACN+B,SAAU,UACV9B,MAAO,oBCnBE+B,cAhCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYJI,eAAe,SAACC,GACdR,EAAKS,SAAS,CAACvB,YAAYsB,EAAME,OAAOC,SAZtCX,EAAKY,MAAQ,CACTlC,OAAOmC,EACP3B,YAAa,IAEjB4B,QAAQC,IAAI,eANFf,wEAgBJ,IAAAgB,EACsBb,KAAKS,MAAzBlC,EADFsC,EACEtC,OAAOQ,EADT8B,EACS9B,YACP+B,EAAevC,EAAOwC,OAAQ,SAAAC,GACpC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASnC,EAAYkC,iBAEzD,OAAQ1C,EAAO4C,OAEXpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACmD,EAAD,CAAWpC,aAAcgB,KAAKI,iBAC9BrC,EAAAC,EAAAC,cAACoD,EAAD,KACAtD,EAAAC,EAAAC,cAACqD,EAAD,CAAU/C,OAAQuC,MALtB/C,EAAAC,EAAAC,cAAA,4BAvBUsD,mBCElBC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SPwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc66c591.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({name,email,id})=>{\r\n    \r\nreturn(\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt ='robots' src={`https://robohash.org/${id}`}/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n            </div>\r\n    </div>\r\n);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList= ({robots})=>{\r\n    const cardComponent=robots.map((user,i)=>{\r\n      return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    });\r\n    return(\r\n        <div>\r\n        \r\n      {cardComponent} \r\n        </div>        \r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-light-blue'\r\n            type='search' \r\n            placeholder='search robots'\r\n            onChange={searchChange}/>\r\n        </div>\r\n       \r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'5px solid black',height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Rakesh Gaur',\r\n      username: 'raka',\r\n      email: 'rkg143san@gmail.com'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Praveen Chouhan',\r\n      username: 'Moothu',\r\n      email: 'praveen@gmail.com'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Prateek Jhalani',\r\n      username: 'Jada',\r\n      email: 'jada@gmail.com'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Pratik Soni',\r\n      username: 'Hacked',\r\n      email: 'you_are_hacked@gmail.com'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Prakash',\r\n      username: 'haddi',\r\n      email: 'haddi_mera_buddy@gmail.com'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Rashmi Mangwani',\r\n      username: 'Moti',\r\n      email: 'Rashmi_moti@gmail.com'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Radhika',\r\n      username: 'gc',\r\n      email: 'papia@gmail.com'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Prity Jain',\r\n      username: 'prity',\r\n      email: 'Kanta_bai@gmail.com'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Rajat Lamba',\r\n      username: 'lambu',\r\n      email: 'sexy@gmail.com'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Bhaad Mai Jao',\r\n      username: 'rishika',\r\n      email: 'Bhaad@gmail.com'\r\n    }\r\n  ];\r\nexport default robots;  ","import React,{Component} from 'react';\r\n//import {robots} from './robots';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\nimport robos from './robots';\r\nclass App extends Component{\r\n  constructor() {\r\n      super();\r\n      this.state = {\r\n          robots:robos,\r\n          searchfield: \"\"\r\n      }\r\n      console.log(\"constructor\");\r\n  }\r\n /* componentDidMount(){\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=>response.json())\r\n      .then(users=>this.setState({robots:users}));\r\n  }*/\r\n  onSearchChange=(event)=>{\r\n    this.setState({searchfield:event.target.value});\r\n  }\r\n    render(){\r\n        const{robots,searchfield}=this.state;       \r\n        const filteredRobots=robots.filter( robot=>{\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase()); \r\n    });\r\n    return !robots.length?\r\n        <h1>Loading</h1>:\r\n        <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n            <CardList robots={filteredRobots}/>\r\n            </Scroll>\r\n        </div>\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App/> , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}